name: CI/CD Workflow

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3

      - name: Cache Node Modules
        uses: actions/setup-node@v3
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}

      - name: Install NPM Packages
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: npm install

      - name: Cache Composer Packages
        uses: php-actions/composer@v6
        id: cache-vendor
        with:
          path: '**/vendor'
          key: ${{ runner.os }}-build-${{ hashFiles('**/composer.lock') }}

      - name: Install Composer Packages
        if: ${{ steps.cache-vendor.outputs.cache-hit != 'true' }}
        run: composer install

  test:
    runs-on: ubunut-latest
    steps:
      - uses: actions/checkout@v3

      - name: Use Node Modules Cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}

      - name: Use Vendor Cache
        uses: actions/cache@v3
        with:
          path: '**/vendor'
          key: ${{ runner.os }}-build-${{ hashFiles('**/composer.lock') }}

      - name: Run Unit Tests
        uses: php-actions/phpunit@v3

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Deploy in EC2
      #   env:
      #       RSA_PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY  }}
      #       EC2_SSH_USERNAME : ${{ secrets.EC2_SSH_USERNAME  }}
      #       EC2_SSH_PUBLIC_IP_ADDRESS : ${{ secrets.EC2_SSH_PUBLIC_IP_ADDRESS  }}
      #   run: |
      #     echo "$RSA_PRIVATE_KEY" > private_key && chmod 600 private_key
      #     ssh -o StrictHostKeyChecking=no -i private_key ${EC2_SSH_USERNAME}@${EC2_SSH_PUBLIC_IP_ADDRESS} '
          
      #       cd /var/www/html &&
      #       sudo git checkout main &&
      #       sudo git fetch --all &&
      #       sudo git reset --hard origin/main &&
      #       sudo git pull origin main
      #     '